from datetime import date, datetime

from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from core.management.bot.create_bot import bot
from core.management.bot.keyboards import registration_keyboard, main_keyboard, generate_list_polls_keyboard
from core.management.bot.states import ProcessHelp
from core.management.bot.utils.functions import get_employee, update_telegram_nickname, check_verification_code, \
    get_curator_for_employee, get_book
from core.management.bot.texts import texts_start_not_registered, texts_start_is_registered, texts_for_curator, \
    texts_reg_success_code, texts_reg_success_code_employee
from employees.models import Employee

router = Router(name='commands-router')


@router.message(CommandStart())
async def cmd_start_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –¥–æ–ø –¥–µ–π—Å—Ç–≤–∏–π –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º –≤ –∫–æ–º–∞–Ω–¥–µ
    """
    current_state = await state.get_state()
    if current_state is None:
        employee = await get_employee(message.from_user.id)
        if not employee:
            try:
                _, code = message.text.split()
                registration = await check_verification_code(message.from_user.id, code)
                answer, employee = registration
                if not answer:
                    await message.answer(texts_start_not_registered, parse_mode='HTML',
                                         reply_markup=registration_keyboard())
                    return
                if employee.role == Employee.RoleChoices.EMPLOYEE:
                    today = datetime.today().date()
                    if employee.date_of_employment >= today:
                        book_employee = get_book('core/management/bot/files/book_employee.pdf')
                        book_welcome = get_book('core/management/bot/files/book_welcome.pdf', welcome=True)
                        curator = await get_curator_for_employee(employee)
                        curator_full_name = curator.full_name if curator else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
                        await bot.send_document(message.from_user.id,
                                                caption=texts_reg_success_code_employee.format(curator_full_name),
                                                document=book_employee, parse_mode='HTML',
                                                reply_markup=ReplyKeyboardRemove())
                        await bot.send_document(message.from_user.id,
                                                caption='–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –Ω–∞—à–∏–º Welcome-book',
                                                document=book_welcome)
                    else:
                        await bot.send_message(message.from_user.id, text=texts_reg_success_code,
                                               parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
                else:
                    await bot.send_message(message.from_user.id, text=texts_reg_success_code,
                                           parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
            except ValueError:
                await message.answer(texts_start_not_registered, parse_mode='HTML', reply_markup=registration_keyboard())
        else:
            await update_telegram_nickname(employee, message.from_user.username)
            if employee.role == Employee.RoleChoices.EMPLOYEE:
                await message.answer(texts_start_is_registered.format(f"@{message.from_user.username}"), parse_mode='HTML', reply_markup=ReplyKeyboardRemove())
            elif employee.role == Employee.RoleChoices.CURATOR:
                await message.answer(texts_for_curator, parse_mode='HTML', reply_markup=ReplyKeyboardRemove())

    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–ø—Ä–æ—Å')


@router.message(Command('help'))
async def cmd_help_handler(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    current_state = await state.get_state()
    if current_state is None:
        employee = await get_employee(message.from_user.id)
        if not employee:
            await message.answer(texts_start_not_registered, parse_mode='HTML', reply_markup=registration_keyboard())
        else:
            await state.set_state(ProcessHelp.help)
            await message.answer('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=main_keyboard(only_cancel=True))
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–ø—Ä–æ—Å')


@router.message(Command('polls'))
async def check_polls_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        employee = await get_employee(message.from_user.id)
        if not employee:
            await message.answer(texts_start_not_registered, parse_mode='HTML', reply_markup=registration_keyboard())
        else:
            list_polls_keyboard = await generate_list_polls_keyboard(message.from_user.id)
            if list_polls_keyboard:
                await message.answer('–í–∞—à–∏ –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã üëá', reply_markup=list_polls_keyboard)
            else:
                await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Å–µ –æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã')
    else:
        await message.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ–ø—Ä–æ—Å')